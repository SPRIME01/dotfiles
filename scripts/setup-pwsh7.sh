#!/usr/bin/env bash
#
# Sets up the PowerShell 7 profile for Windows from a WSL2 environment.
#

set -e # Exit immediately if a command exits with a non-zero status.

DRY_RUN=0
REQUIRE_SYMLINK=0
PREFER_SYMLINK=1
for arg in "$@"; do
  case "$arg" in
    --dry-run)
      DRY_RUN=1 ;;
    --require-symlink)
      REQUIRE_SYMLINK=1 ;;
    --no-symlink)
      PREFER_SYMLINK=0 ;;
  esac
done

echo "🔧 Setting up PowerShell 7 (pwsh) Windows profile..."

# --- Pre-flight Checks ---
if [[ -z "${WSL_DISTRO_NAME:-}" ]]; then
	echo "❌ This command is designed for WSL2 environments."
	echo "💡 Run this from WSL2 to set up your Windows PowerShell 7 profile."
	exit 1
fi

if ! command -v pwsh.exe >/dev/null 2>&1; then
	echo "❌ PowerShell 7 (pwsh.exe) not found on your Windows PATH."
	echo "💡 Install PowerShell 7 from: https://github.com/PowerShell/PowerShell/releases"
	exit 1
fi

WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r' 2>/dev/null)
if [[ -z "$WIN_USER" ]]; then
	echo "❌ Could not determine Windows username."
	exit 1
fi
echo "✅ Detected Windows user: $WIN_USER"

# --- Determine actual Windows $PROFILE path ---
PWSH7_PROFILE_WIN=$(pwsh.exe -NoProfile -NonInteractive -Command '$PROFILE' 2>/dev/null | tr -d '\r' 2>/dev/null)
if [[ -z "$PWSH7_PROFILE_WIN" ]]; then
    # Fallback to standard Documents path
    PWSH7_PROFILE_WIN="C:\\Users\\$WIN_USER\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1"
fi
# Convert to WSL path for file operations from WSL
# Convert Windows path to WSL path robustly
if command -v wslpath >/dev/null 2>&1; then
  PWSH7_PROFILE_WSL=$(wslpath -u "$PWSH7_PROFILE_WIN" 2>/dev/null || true)
fi
if [[ -z "$PWSH7_PROFILE_WSL" ]]; then
  # Fallback conversion if wslpath isn't available for some reason
  PWSH7_PROFILE_WSL=$(printf '%s' "$PWSH7_PROFILE_WIN" | sed -e 's|^\([A-Za-z]\):|/mnt/\L\1|' -e 's|\\|/|g')
fi
PWSH7_PROFILE_DIR=$(dirname "$PWSH7_PROFILE_WSL")
echo "✅ Using PowerShell 7 profile path: $PWSH7_PROFILE_WSL"

if [[ $DRY_RUN -eq 1 ]]; then
    echo "📝 (dry-run) Would ensure directory exists: $PWSH7_PROFILE_DIR"
else
    if [[ ! -d "$PWSH7_PROFILE_DIR" ]]; then
        mkdir -p "$PWSH7_PROFILE_DIR"
        echo "✅ Created profile directory: $PWSH7_PROFILE_DIR"
    fi
fi

# Use the correct WSL2 path for accessing the dotfiles from Windows
DOTFILES_WIN_PATH="\\wsl.localhost\${WSL_DISTRO_NAME}\home\${USER}\dotfiles"
PROJECTS_WIN_PATH="C:\Users\${WIN_USER}\projects"

echo "🔗 Preparing to link Windows profile to repo profile (preferred)."

# Developer Mode check (symlinks without elevation)
DEV_MODE_STATUS=$(powershell.exe -NoProfile -NonInteractive -Command "try { (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock' -Name 'AllowDevelopmentWithoutDevLicense' -ErrorAction SilentlyContinue).AllowDevelopmentWithoutDevLicense } catch { '' }" 2>/dev/null | tr -d '\r' || true)
if [[ -z "$DEV_MODE_STATUS" || "$DEV_MODE_STATUS" == "0" ]]; then
  echo "⚠️  Windows Developer Mode appears OFF; symlink may require elevation."
  echo "   Enable Settings → For Developers → Developer Mode for best results."
fi

# Try to make the Windows profile a symlink pointing to the repo profile, to keep the actual file in the project folder.
CREATE_SYMLINK=1
if [[ $DRY_RUN -eq 1 ]]; then
    echo "📝 (dry-run) Would attempt to create Windows symlink: $PWSH7_PROFILE_WSL -> ${DOTFILES_WIN_PATH}\\PowerShell\\Microsoft.PowerShell_profile.ps1"
else
    # Ensure parent directory exists
    PROFILE_PARENT_DIR=$(dirname "$PWSH7_PROFILE_WSL")
    if [[ ! -d "$PROFILE_PARENT_DIR" ]]; then
        mkdir -p "$PROFILE_PARENT_DIR" 2>/dev/null || true
    fi
    if [[ $PREFER_SYMLINK -eq 1 ]]; then
      # Remove existing regular file so symlink can be created cleanly
      if [[ -f "$PWSH7_PROFILE_WSL" && ! -L "$PWSH7_PROFILE_WSL" ]]; then
          rm -f "$PWSH7_PROFILE_WSL" 2>/dev/null || true
      fi
      powershell.exe -NoProfile -NonInteractive -Command "try { New-Item -ItemType SymbolicLink -Path \`"$PWSH7_PROFILE_WIN\`" -Target \`"${DOTFILES_WIN_PATH}\PowerShell\Microsoft.PowerShell_profile.ps1\`" -Force | Out-Null; exit 0 } catch { exit 1 }" >/dev/null 2>&1 || CREATE_SYMLINK=0
    else
      CREATE_SYMLINK=0
    fi
fi

if [[ $CREATE_SYMLINK -eq 0 ]]; then
  if [[ $REQUIRE_SYMLINK -eq 1 ]]; then
    echo "❌ Required symlink could not be created. Aborting (no loader fallback due to --require-symlink)." >&2
    exit 2
  fi
  # Fallback: write a tiny loader profile that sources from the repo
  if [[ $DRY_RUN -eq 1 ]]; then
      echo "📝 (dry-run) Would write PowerShell loader profile to: $PWSH7_PROFILE_WSL"
  else
cat >"$PWSH7_PROFILE_WSL" <<EOF
# Windows PowerShell 7 Profile - Generated by dotfiles setup
# Created: $(date -Iseconds)
# This profile loads the main dotfiles PowerShell configuration from WSL2.

# Set environment variables for Windows PowerShell 7
\$env:DOTFILES_ROOT = "$DOTFILES_WIN_PATH"
\$env:PROJECTS_ROOT = "$PROJECTS_WIN_PATH"

# Intentionally do not create directories here to avoid permission prompts/errors

# Source the main dotfiles PowerShell profile
\$mainProfile = Join-Path \$env:DOTFILES_ROOT "PowerShell\Microsoft.PowerShell_profile.ps1"
if (Test-Path \$mainProfile) {
    try {
        # Define common utility functions that might be missing
        if (-not (Get-Command Add-ToPath -ErrorAction SilentlyContinue)) {
            function Add-ToPath {
                param([string]\$Path)
                if (\$Path -and -not (\$env:PATH -split ';' | Where-Object { \$_ -eq \$Path })) {
                    \$env:PATH = "\$Path;\$env:PATH"
                }
            }
        }

        . \$mainProfile
        Write-Host "✅ Loaded dotfiles PowerShell profile" -ForegroundColor Green
    } catch {
        Write-Warning "❌ Error loading dotfiles PowerShell profile:"
        Write-Warning \$_.Exception.Message
        Write-Host "💡 Falling back to basic configuration" -ForegroundColor Yellow

        # Basic fallback configuration
        if (-not \$env:PROJECTS_ROOT) { \$env:PROJECTS_ROOT = "C:\Users\\$WIN_USER\projects" }
        function projects { Set-Location \$env:PROJECTS_ROOT }
        Write-Host "📦 Created basic 'projects' function as fallback" -ForegroundColor Green
    }
} else {
    Write-Warning "Dotfiles main profile not found at: \$mainProfile"
    Write-Host "📦 Setting up basic configuration..." -ForegroundColor Yellow

    # Basic configuration when main profile is not found
    if (-not \$env:PROJECTS_ROOT) { \$env:PROJECTS_ROOT = "C:\Users\\$WIN_USER\projects" }
    function projects { Set-Location \$env:PROJECTS_ROOT }
    Write-Host "📦 Created basic 'projects' function" -ForegroundColor Green
}
EOF
    echo "✅ Created PowerShell 7 loader profile."
  fi
else
  echo "✅ Created Windows symlink to project profile."
fi

if [[ $DRY_RUN -eq 1 ]]; then
    echo "📝 (dry-run) Would set PowerShell execution policy to Bypass (CurrentUser)"
else
    # --- Set Execution Policy ---
    # Use pwsh.exe to run the PowerShell command directly.
    # Escape the inner PowerShell variables correctly for the bash command.
    pwsh.exe -NoProfile -Command "
        Write-Host 'Setting PowerShell execution policy...'
        try {
            Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser -Force -ErrorAction Stop
            Write-Host '✅ PowerShell execution policy set to Bypass' -ForegroundColor Green
        } catch {
            Write-Warning '⚠️  Could not set execution policy automatically.'
            Write-Warning \$_.Exception.Message
            Write-Host '💡 To fix, run this in an Administrator PowerShell terminal:'
            Write-Host '   Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser -Force'
        }
    "
fi

if [[ $DRY_RUN -eq 1 ]]; then
    echo ""
    echo "🧪 (dry-run) Verification plan:"
    echo "  • Check pwsh.exe available"
    echo "  • Resolve Windows profile path via pwsh: '$PWSH7_PROFILE'"
    echo "  • Verify main profile path exists in WSL: '$DOTFILES_WIN_PATH\\PowerShell\\Microsoft.PowerShell_profile.ps1' (from Windows)"
    echo "  • Confirm oh-my-posh installed on Windows"
    echo ""
    echo "✅ Dry run complete. No changes were made."
else
    echo ""
    echo "🧪 Testing PowerShell 7 profile..."
    pwsh.exe -NoProfile -NonInteractive -Command "
        \$env:DOTFILES_PWSH_NONINTERACTIVE = '1'
        \$WarningPreference = 'SilentlyContinue'
        Write-Host '--- PowerShell Profile Test ---'
        Write-Host ('Profile path according to $PROFILE: ' + \$PROFILE)
        if (Test-Path \$PROFILE) {
            try {
                . \$PROFILE
                Write-Host '✅ Sourced profile successfully' -ForegroundColor Green
            } catch {
                Write-Warning ('❌ Error sourcing profile: ' + \$_.Exception.Message)
            }
        } else {
            Write-Host '❌ Profile not found at expected path' -ForegroundColor Red
        }
        Write-Host '--- End Test ---'
    "
    echo "🎉 PowerShell 7 setup complete!"
fi
