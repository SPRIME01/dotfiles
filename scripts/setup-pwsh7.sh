#!/bin/bash
#
# Sets up the PowerShell 7 profile for Windows from a WSL2 environment.
#

set -e # Exit immediately if a command exits with a non-zero status.

echo "🔧 Setting up PowerShell 7 (pwsh) Windows profile..."

# --- Pre-flight Checks ---
if [[ -z "${WSL_DISTRO_NAME:-}" ]]; then
    echo "❌ This command is designed for WSL2 environments."
    echo "💡 Run this from WSL2 to set up your Windows PowerShell 7 profile."
    exit 1
fi

if ! command -v pwsh.exe >/dev/null 2>&1; then
    echo "❌ PowerShell 7 (pwsh.exe) not found on your Windows PATH."
    echo "💡 Install PowerShell 7 from: https://github.com/PowerShell/PowerShell/releases"
    exit 1
fi

WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r' 2>/dev/null)
if [[ -z "$WIN_USER" ]]; then
    echo "❌ Could not determine Windows username."
    exit 1
fi
echo "✅ Detected Windows user: $WIN_USER"

# --- Profile Creation ---
PWSH7_PROFILE_DIR="/mnt/c/Users/$WIN_USER/Documents/PowerShell"
PWSH7_PROFILE="$PWSH7_PROFILE_DIR/Microsoft.PowerShell_profile.ps1"
echo "✅ Using PowerShell 7 profile path: $PWSH7_PROFILE"

if [[ ! -d "$PWSH7_PROFILE_DIR" ]]; then
    mkdir -p "$PWSH7_PROFILE_DIR"
    echo "✅ Created profile directory: $PWSH7_PROFILE_DIR"
fi

# Use the correct WSL2 path for accessing the dotfiles from Windows
DOTFILES_WIN_PATH="\\wsl.localhost\${WSL_DISTRO_NAME}\home\${USER}\dotfiles"
PROJECTS_WIN_PATH="C:\Users\${WIN_USER}\projects"

# Create the profile content using a heredoc for clarity.
cat > "$PWSH7_PROFILE" <<EOF
# Windows PowerShell 7 Profile - Generated by dotfiles setup
# Created: $(date -Iseconds)
# This profile loads the main dotfiles PowerShell configuration from WSL2.

# Set environment variables for Windows PowerShell 7
\$env:DOTFILES_ROOT = "$DOTFILES_WIN_PATH"
\$env:PROJECTS_ROOT = "$PROJECTS_WIN_PATH"

# Ensure projects directory exists
if (-not (Test-Path \$env:PROJECTS_ROOT)) {
    New-Item -ItemType Directory -Path \$env:PROJECTS_ROOT -Force | Out-Null
}

# Source the main dotfiles PowerShell profile
\$mainProfile = Join-Path \$env:DOTFILES_ROOT "PowerShell\Microsoft.PowerShell_profile.ps1"
if (Test-Path \$mainProfile) {
    try {
        # Define common utility functions that might be missing
        if (-not (Get-Command Add-ToPath -ErrorAction SilentlyContinue)) {
            function Add-ToPath {
                param([string]\$Path)
                if (\$Path -and -not (\$env:PATH -split ';' | Where-Object { \$_ -eq \$Path })) {
                    \$env:PATH = "\$Path;\$env:PATH"
                }
            }
        }

        . \$mainProfile
        Write-Host "✅ Loaded dotfiles PowerShell profile" -ForegroundColor Green
    } catch {
        Write-Warning "❌ Error loading dotfiles PowerShell profile:"
        Write-Warning \$_.Exception.Message
        Write-Host "💡 Falling back to basic configuration" -ForegroundColor Yellow

        # Basic fallback configuration
        if (-not \$env:PROJECTS_ROOT) { \$env:PROJECTS_ROOT = "C:\Users\\$WIN_USER\projects" }
        function projects { Set-Location \$env:PROJECTS_ROOT }
        Write-Host "📦 Created basic 'projects' function as fallback" -ForegroundColor Green
    }
} else {
    Write-Warning "Dotfiles main profile not found at: \$mainProfile"
    Write-Host "📦 Setting up basic configuration..." -ForegroundColor Yellow

    # Basic configuration when main profile is not found
    if (-not \$env:PROJECTS_ROOT) { \$env:PROJECTS_ROOT = "C:\Users\\$WIN_USER\projects" }
    function projects { Set-Location \$env:PROJECTS_ROOT }
    Write-Host "📦 Created basic 'projects' function" -ForegroundColor Green
}
EOF

echo "✅ Created PowerShell 7 profile."

# --- Set Execution Policy ---
# Use pwsh.exe to run the PowerShell command directly.
# Escape the inner PowerShell variables correctly for the bash command.
pwsh.exe -NoProfile -Command "
    Write-Host 'Setting PowerShell execution policy...'
    try {
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser -Force -ErrorAction Stop
        Write-Host '✅ PowerShell execution policy set to Bypass' -ForegroundColor Green
    } catch {
        Write-Warning '⚠️  Could not set execution policy automatically.'
        Write-Warning \$_.Exception.Message
        Write-Host '💡 To fix, run this in an Administrator PowerShell terminal:'
        Write-Host '   Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser -Force'
    }
"

echo ""
echo "🧪 Testing PowerShell 7 profile..."
pwsh.exe -NoProfile -Command "
    Write-Host '--- PowerShell Profile Test ---'
    if (Test-Path '$PWSH7_PROFILE') {
        . '$PWSH7_PROFILE'
    } else {
        Write-Host 'Profile not found.'
    }
    Write-Host '--- End Test ---'
"
echo "🎉 PowerShell 7 setup complete!"
