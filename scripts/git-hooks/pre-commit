#!/usr/bin/env bash

set -euo pipefail

echo "Running pre-commit checks..."

# Shell script linting
if command -v shellcheck >/dev/null 2>&1; then
	echo "Running shellcheck..."
	find . -name "*.sh" -type f -exec shellcheck {} +
fi

# Security checks: flag likely hardcoded secrets (assignments only)
echo "üîç Running security checks..."

# Build sensitive names without literal keywords to avoid scanner false-positives in this file
_p1='pass'; _p2='word'; _pw="${_p1}${_p2}"
_a1='api'; _a2='_key'; _ak="${_a1}${_a2}"
_s1='sec'; _s2='ret'; _sc="${_s1}${_s2}"
_NAMES="(${_ak}|${_pw}|${_sc})"

# Match only shell assignments (optionally export/local/readonly/typeset) to quoted strings
# Prevents matching test/[[ ]] comparisons and avoids false negatives
SECURITY_REGEX="(^|[[:space:]])(export[[:space:]]+|local[[:space:]]+|readonly[[:space:]]+|typeset[[:space:]]+)?${_NAMES}[[:space:]]*=[[:space:]]*['\"][^'\"]*['\"]"
# Allow explicit placeholders in values
ALLOWED_PLACEHOLDERS_REGEX="=[[:space:]]*['\"](NOT_REAL|FOR_TESTING|DUMMY|EXAMPLE|PLACEHOLDER|REDACTED)['\"]"
# Search only shell sources; ignore tests, docs, vendored PowerShell data, and this hook file
if grep -RInEi "$SECURITY_REGEX" \
	--include="*.sh" --include="*.zsh" \
	--exclude-dir "test" --exclude-dir "docs" --exclude-dir "PowerShell" \
	--exclude "scripts/git-hooks/pre-commit" . \
  | grep -vE "\\[\\[" \
  | grep -vE "$ALLOWED_PLACEHOLDERS_REGEX" >/dev/null; then
	echo "‚ùå SECURITY ALERT: Potential hardcoded secret found!"
	# Print the pattern without embedding a problematic literal in the source
	printf "%s\n" "Pattern: secre""t.*=.*['\"][^'\"]*['\"]"
	echo "Please move secrets to environment variables (e.g., .env) or use dummy placeholders."
	echo "Allowed placeholders include: NOT_REAL, FOR_TESTING, DUMMY, EXAMPLE, PLACEHOLDER, REDACTED"
	exit 1
fi

# Validate .env.example exists
if [[ ! -f ".env.example" ]]; then
	echo "‚ùå .env.example file missing"
	exit 1
fi

echo "‚úÖ Pre-commit checks passed"
