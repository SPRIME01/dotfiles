# Global Justfile (managed by chezmoi)

default:
	@echo "Global tasks: bootstrap | lint | format | direnv-install | env-* recipes"
	@echo "Environment: env-list | env-add KEY=VALUE | env-remove KEY | env-fix-perms"

# Bootstrap development environment
bootstrap:
	chezmoi apply
	@command -v mise >/dev/null 2>&1 && mise install || true
	@echo "Environment ready"

# Lint placeholder (customize per-language locally)
lint:
	@echo "No global lint configured; add project-specific linters"

# Format placeholder
format:
	@echo "No global formatter configured; add project-specific formatters"

# Install direnv across platforms (simple variant)
direnv-install:
	@bash -c 'set -euo pipefail; if command -v direnv >/dev/null 2>&1; then echo "✅ direnv: $$(direnv version)"; exit 0; fi; if command -v apt >/dev/null 2>&1; then sudo apt update -y >/dev/null 2>&1 || true; sudo apt install -y direnv; elif command -v dnf >/dev/null 2>&1; then sudo dnf install -y direnv; elif command -v pacman >/dev/null 2>&1; then sudo pacman -Sy --noconfirm direnv; elif command -v zypper >/dev/null 2>&1; then sudo zypper install -y direnv; elif command -v brew >/dev/null 2>&1; then brew install direnv; elif command -v scoop >/dev/null 2>&1; then scoop install direnv; elif command -v choco >/dev/null 2>&1; then choco install direnv -y; else echo "❌ No supported package manager found. Install manually from https://direnv.net"; exit 1; fi'

# ===== Windows chezmoi helpers (run from WSL) =====
windows-chezmoi-diff SRC="${HOME}/dotfiles":
	@bash -lc 'set -euo pipefail; ROOT="{{SRC}}"; if [[ ! -d "$ROOT" ]]; then echo "❌ dotfiles not found at $ROOT"; exit 2; fi; just -f "$ROOT/justfile" windows-chezmoi-diff || true'

windows-chezmoi-apply SRC="${HOME}/dotfiles":
	@bash -lc 'set -euo pipefail; ROOT="{{SRC}}"; if [[ ! -d "$ROOT" ]]; then echo "❌ dotfiles not found at $ROOT"; exit 2; fi; just -f "$ROOT/justfile" windows-chezmoi-apply || true'

# ===== Environment Management =====

# List environment variables from .env file (if present)
env-list:
	@bash -c 'set -euo pipefail; if [[ -f .env ]]; then echo "📋 Environment variables in .env:"; grep -v "^#" .env | grep -v "^$$" | sort || true; else echo "ℹ️  No .env file found in current directory"; fi'

# Add or update environment variable in .env file
env-add KEY_VALUE:
	@bash -c 'set -euo pipefail; KV="{{KEY_VALUE}}"; if [[ -z "$KV" ]]; then echo "Usage: just env-add KEY=VALUE"; exit 1; fi; if [[ "$KV" != *"="* ]]; then echo "❌ Format must be KEY=VALUE"; exit 1; fi; KEY="$${KV%%=*}"; VALUE="$${KV#*=}"; echo "Setting $KEY=$VALUE"; if [[ -f .env ]]; then if grep -q "^$KEY=" .env; then sed -i "s/^$KEY=.*/$KEY=$VALUE/" .env; echo "✅ Updated $KEY in .env"; else echo "$KEY=$VALUE" >> .env; echo "✅ Added $KEY to .env"; fi; else echo "$KEY=$VALUE" > .env; echo "✅ Created .env with $KEY"; fi; echo "💡 Run: source .env  # to apply to current shell"'

# Remove environment variable from .env file
env-remove KEY:
	@bash -c 'set -euo pipefail; K="{{KEY}}"; if [[ -z "$K" ]]; then echo "Usage: just env-remove KEY"; exit 1; fi; if [[ ! -f .env ]]; then echo "ℹ️  No .env file found"; exit 0; fi; if grep -q "^$K=" .env; then grep -v "^$K=" .env > .env.tmp && mv .env.tmp .env; echo "✅ Removed $K from .env"; else echo "ℹ️  $K not found in .env"; fi'

# Fix .env file permissions (600 = user read/write only)
env-fix-perms:
	@bash -c 'set -euo pipefail; if [[ -f .env ]]; then chmod 600 .env; echo "🔐 Fixed .env permissions (600)"; ls -la .env; else echo "ℹ️  No .env file found"; fi'
