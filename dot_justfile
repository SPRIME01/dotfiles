# Global Justfile (managed by chezmoi)

default:
	@echo "Global tasks: bootstrap | lint | format | direnv-install | env-* recipes"
	@echo "Global Environment: env-list | env-add KEY=VALUE | env-remove KEY | env-fix-perms"
	@echo "Environment file: ~/dotfiles/.env"

# Bootstrap development environment
bootstrap:
	chezmoi apply
	@command -v mise >/dev/null 2>&1 && mise install || true
	@echo "Environment ready"

# Lint placeholder (customize per-language locally)
lint:
	@echo "No global lint configured; add project-specific linters"

# Format placeholder
format:
	@echo "No global formatter configured; add project-specific formatters"

# Install direnv across platforms (simple variant)
direnv-install:
	@bash -c 'set -euo pipefail; if command -v direnv >/dev/null 2>&1; then echo "‚úÖ direnv: $$(direnv version)"; exit 0; fi; if command -v apt >/dev/null 2>&1; then sudo apt update -y >/dev/null 2>&1 || true; sudo apt install -y direnv; elif command -v dnf >/dev/null 2>&1; then sudo dnf install -y direnv; elif command -v pacman >/dev/null 2>&1; then sudo pacman -Sy --noconfirm direnv; elif command -v zypper >/dev/null 2>&1; then sudo zypper install -y direnv; elif command -v brew >/dev/null 2>&1; then brew install direnv; elif command -v scoop >/dev/null 2>&1; then scoop install direnv; elif command -v choco >/dev/null 2>&1; then choco install direnv -y; else echo "‚ùå No supported package manager found. Install manually from https://direnv.net"; exit 1; fi'

# ===== Windows chezmoi helpers (run from WSL) =====
windows-chezmoi-diff SRC="${HOME}/dotfiles":
	@bash -lc 'set -euo pipefail; ROOT="{{SRC}}"; if [[ ! -d "$ROOT" ]]; then echo "‚ùå dotfiles not found at $ROOT"; exit 2; fi; just -f "$ROOT/justfile" windows-chezmoi-diff || true'

windows-chezmoi-apply SRC="${HOME}/dotfiles":
	@bash -lc 'set -euo pipefail; ROOT="{{SRC}}"; if [[ ! -d "$ROOT" ]]; then echo "‚ùå dotfiles not found at $ROOT"; exit 2; fi; just -f "$ROOT/justfile" windows-chezmoi-apply || true'

# ===== Environment Management =====

# List environment variables from global .env file (if present)
env-list:
	@bash -c 'set -euo pipefail; ENV_FILE="$$HOME/dotfiles/.env"; if [[ -f "$$ENV_FILE" ]]; then echo "üìã Global environment variables in $$ENV_FILE:"; grep -v "^#" "$$ENV_FILE" | grep -v "^$$" | sort || true; else echo "‚ÑπÔ∏è  No global .env file found at $$ENV_FILE"; fi'

# Add or update environment variable in global .env file
env-add KEY_VALUE:
	@bash -c 'set -euo pipefail; KV="{{KEY_VALUE}}"; if [[ -z "$$KV" ]]; then echo "Usage: just env-add KEY=VALUE"; exit 1; fi; if [[ "$$KV" != *"="* ]]; then echo "‚ùå Format must be KEY=VALUE"; exit 1; fi; KEY="$${KV%%=*}"; VALUE="$${KV#*=}"; ENV_FILE="$$HOME/dotfiles/.env"; echo "Setting $$KEY=$$VALUE in global .env"; mkdir -p "$$(dirname "$$ENV_FILE")"; if [[ -f "$$ENV_FILE" ]]; then if grep -q "^$$KEY=" "$$ENV_FILE"; then sed -i "s/^$$KEY=.*/$$KEY=$$VALUE/" "$$ENV_FILE"; echo "‚úÖ Updated $$KEY in $$ENV_FILE"; else echo "$$KEY=$$VALUE" >> "$$ENV_FILE"; echo "‚úÖ Added $$KEY to $$ENV_FILE"; fi; else echo "$$KEY=$$VALUE" > "$$ENV_FILE"; echo "‚úÖ Created $$ENV_FILE with $$KEY"; fi; chmod 600 "$$ENV_FILE"; echo "üí° Restart your shell or run: source $$ENV_FILE"'

# Remove environment variable from global .env file
env-remove KEY:
	@bash -c 'set -euo pipefail; K="{{KEY}}"; if [[ -z "$$K" ]]; then echo "Usage: just env-remove KEY"; exit 1; fi; ENV_FILE="$$HOME/dotfiles/.env"; if [[ ! -f "$$ENV_FILE" ]]; then echo "‚ÑπÔ∏è  No global .env file found at $$ENV_FILE"; exit 0; fi; if grep -q "^$$K=" "$$ENV_FILE"; then grep -v "^$$K=" "$$ENV_FILE" > "$$ENV_FILE.tmp" && mv "$$ENV_FILE.tmp" "$$ENV_FILE"; echo "‚úÖ Removed $$K from $$ENV_FILE"; else echo "‚ÑπÔ∏è  $$K not found in $$ENV_FILE"; fi'

# Fix global .env file permissions (600 = user read/write only)
env-fix-perms:
	@bash -c 'set -euo pipefail; ENV_FILE="$$HOME/dotfiles/.env"; if [[ -f "$$ENV_FILE" ]]; then chmod 600 "$$ENV_FILE"; echo "üîê Fixed $$ENV_FILE permissions (600)"; ls -la "$$ENV_FILE"; else echo "‚ÑπÔ∏è  No global .env file found at $$ENV_FILE"; fi'
