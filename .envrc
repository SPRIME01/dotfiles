# direnv configuration for this dotfiles repo
#
# Committed policy with secure defaults. See `.envrc.example` for comments.

set -euo pipefail
export DIRENV_LOG_FORMAT=""
umask 077

watch_file .env
watch_file mcp/.env
watch_file .envrc.local

# Use mise for tool version management (must come before dotenv)
# Ensure the mise direnv hook is loaded so that `use mise` works even
# if the global direnvrc wasn't configured. Prefer sourcing the hook
# path from `mise direnv`, and fall back to an eval-based activator.
if command -v mise >/dev/null 2>&1; then
  if ! type -t use_mise >/dev/null 2>&1; then
    if mise direnv >/dev/null 2>&1; then
      # mise prints the direnv hook to stdout; eval it
      eval "$(mise direnv)" || true
    else
      eval "$(mise direnv activate bash)" || true
    fi
  fi
  use mise
fi

dotenv_if_exists .env.defaults
dotenv_if_exists .env
dotenv_if_exists mcp/.env

if [ -z "${DOTFILES_ROOT:-}" ]; then
  export DOTFILES_ROOT=$(pwd -P)
fi

PATH_add "$PWD/scripts"
PATH_add "$PWD/tools"

# Vault Agent sink (optional, recommended when using Vault)
VAULT_SINK_PATH=${VAULT_SINK_PATH:-"$HOME/.cache/vault/dotfiles.env"}
watch_file "$VAULT_SINK_PATH"
dotenv_if_exists "$VAULT_SINK_PATH"

# Optional (uncomment as needed):
# if command -v asdf >/dev/null 2>&1; then use asdf; fi
# if [ -d .venv ]; then layout python .venv
# elif [ -f requirements.txt ] || [ -f pyproject.toml ]; then layout python; fi
# Volta PATH injection deprecated in favor of Mise

# Personal overrides (not committed)
if [ -f .envrc.local ]; then
  # shellcheck disable=SC1091
  source .envrc.local
fi
